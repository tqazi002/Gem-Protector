
testKillEnemy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000862  000008f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800110  00800110  00000906  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bb8  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be3  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001086  00000000  00000000  000042eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  00005374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008db  00000000  00000000  00005b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bbb  00000000  00000000  00006417  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008fd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 35       	cpi	r26, 0x52	; 82
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ed d2       	rcall	.+1498   	; 0x69e <main>
  c4:	cc c3       	rjmp	.+1944   	; 0x85e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
 byte y= i / 21;
 char ascii = (i % 96)+32;
 PutCh(ascii,x*6,y*8,CYAN);
 }
 msDelay(2000);
}
  c8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
  cc:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
  d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
  d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
  d8:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <_avr_timer_cntcurr>
  dc:	70 93 48 01 	sts	0x0148, r23	; 0x800148 <_avr_timer_cntcurr+0x1>
  e0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_avr_timer_cntcurr+0x2>
  e4:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 10e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 112:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 116:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 11a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 11e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 122:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 126:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_avr_timer_cntcurr>
 148:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_avr_timer_cntcurr+0x1>
 14c:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <_avr_timer_cntcurr+0x2>
 150:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 15e:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 162:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 166:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <TimerFlag>
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 180:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 184:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 188:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_avr_timer_cntcurr>
 18c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_avr_timer_cntcurr+0x1>
 190:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <_avr_timer_cntcurr+0x2>
 194:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <SetupPorts>:
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	84 b9       	out	0x04, r24	; 4
 1ae:	17 b8       	out	0x07, r1	; 7
 1b0:	28 9a       	sbi	0x05, 0	; 5
 1b2:	08 95       	ret

000001b4 <msDelay>:
 1b4:	18 16       	cp	r1, r24
 1b6:	19 06       	cpc	r1, r25
 1b8:	6c f4       	brge	.+26     	; 0x1d4 <msDelay+0x20>
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	ef e9       	ldi	r30, 0x9F	; 159
 1c0:	ff e0       	ldi	r31, 0x0F	; 15
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <msDelay+0xe>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <msDelay+0x14>
 1c8:	00 00       	nop
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	82 17       	cp	r24, r18
 1d0:	93 07       	cpc	r25, r19
 1d2:	a9 f7       	brne	.-22     	; 0x1be <msDelay+0xa>
 1d4:	08 95       	ret

000001d6 <intsqrt>:
 1d6:	4f 92       	push	r4
 1d8:	5f 92       	push	r5
 1da:	6f 92       	push	r6
 1dc:	7f 92       	push	r7
 1de:	8f 92       	push	r8
 1e0:	9f 92       	push	r9
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	2b 01       	movw	r4, r22
 1f0:	3c 01       	movw	r6, r24
 1f2:	67 2b       	or	r22, r23
 1f4:	68 2b       	or	r22, r24
 1f6:	69 2b       	or	r22, r25
 1f8:	49 f1       	breq	.+82     	; 0x24c <intsqrt+0x76>
 1fa:	e0 e1       	ldi	r30, 0x10	; 16
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	c1 2c       	mov	r12, r1
 200:	d1 2c       	mov	r13, r1
 202:	76 01       	movw	r14, r12
 204:	81 2c       	mov	r8, r1
 206:	91 2c       	mov	r9, r1
 208:	54 01       	movw	r10, r8
 20a:	68 94       	set
 20c:	97 f8       	bld	r9, 7
 20e:	c8 28       	or	r12, r8
 210:	d9 28       	or	r13, r9
 212:	ea 28       	or	r14, r10
 214:	fb 28       	or	r15, r11
 216:	a7 01       	movw	r20, r14
 218:	96 01       	movw	r18, r12
 21a:	c7 01       	movw	r24, r14
 21c:	b6 01       	movw	r22, r12
 21e:	f7 d2       	rcall	.+1518   	; 0x80e <__mulsi3>
 220:	46 16       	cp	r4, r22
 222:	57 06       	cpc	r5, r23
 224:	68 06       	cpc	r6, r24
 226:	79 06       	cpc	r7, r25
 228:	50 f4       	brcc	.+20     	; 0x23e <intsqrt+0x68>
 22a:	d5 01       	movw	r26, r10
 22c:	c4 01       	movw	r24, r8
 22e:	80 95       	com	r24
 230:	90 95       	com	r25
 232:	a0 95       	com	r26
 234:	b0 95       	com	r27
 236:	c8 22       	and	r12, r24
 238:	d9 22       	and	r13, r25
 23a:	ea 22       	and	r14, r26
 23c:	fb 22       	and	r15, r27
 23e:	b6 94       	lsr	r11
 240:	a7 94       	ror	r10
 242:	97 94       	ror	r9
 244:	87 94       	ror	r8
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	11 f7       	brne	.-60     	; 0x20e <intsqrt+0x38>
 24a:	03 c0       	rjmp	.+6      	; 0x252 <intsqrt+0x7c>
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
 250:	76 01       	movw	r14, r12
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	af 90       	pop	r10
 262:	9f 90       	pop	r9
 264:	8f 90       	pop	r8
 266:	7f 90       	pop	r7
 268:	6f 90       	pop	r6
 26a:	5f 90       	pop	r5
 26c:	4f 90       	pop	r4
 26e:	08 95       	ret

00000270 <OpenSPI>:
 270:	80 e5       	ldi	r24, 0x50	; 80
 272:	8c bd       	out	0x2c, r24	; 44
 274:	8d b5       	in	r24, 0x2d	; 45
 276:	81 60       	ori	r24, 0x01	; 1
 278:	8d bd       	out	0x2d, r24	; 45
 27a:	08 95       	ret

0000027c <Xfer>:
 27c:	8e bd       	out	0x2e, r24	; 46
 27e:	0d b4       	in	r0, 0x2d	; 45
 280:	07 fe       	sbrs	r0, 7
 282:	fd cf       	rjmp	.-6      	; 0x27e <Xfer+0x2>
 284:	8e b5       	in	r24, 0x2e	; 46
 286:	08 95       	ret

00000288 <WriteCmd>:
 288:	29 98       	cbi	0x05, 1	; 5
 28a:	f8 df       	rcall	.-16     	; 0x27c <Xfer>
 28c:	29 9a       	sbi	0x05, 1	; 5
 28e:	08 95       	ret

00000290 <WriteWord>:
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
 294:	89 2f       	mov	r24, r25
 296:	f2 df       	rcall	.-28     	; 0x27c <Xfer>
 298:	8c 2f       	mov	r24, r28
 29a:	f0 df       	rcall	.-32     	; 0x27c <Xfer>
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <Write565>:
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	08 2f       	mov	r16, r24
 2aa:	19 2f       	mov	r17, r25
 2ac:	eb 01       	movw	r28, r22
 2ae:	8c e2       	ldi	r24, 0x2C	; 44
 2b0:	eb df       	rcall	.-42     	; 0x288 <WriteCmd>
 2b2:	20 97       	sbiw	r28, 0x00	; 0
 2b4:	59 f0       	breq	.+22     	; 0x2cc <Write565+0x2c>
 2b6:	91 2f       	mov	r25, r17
 2b8:	9e bd       	out	0x2e, r25	; 46
 2ba:	0d b4       	in	r0, 0x2d	; 45
 2bc:	07 fe       	sbrs	r0, 7
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <Write565+0x1a>
 2c0:	0e bd       	out	0x2e, r16	; 46
 2c2:	0d b4       	in	r0, 0x2d	; 45
 2c4:	07 fe       	sbrs	r0, 7
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <Write565+0x22>
 2c8:	21 97       	sbiw	r28, 0x01	; 1
 2ca:	b1 f7       	brne	.-20     	; 0x2b8 <Write565+0x18>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	08 95       	ret

000002d6 <HardwareReset>:
 2d6:	28 98       	cbi	0x05, 0	; 5
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	6b df       	rcall	.-298    	; 0x1b4 <msDelay>
 2de:	28 9a       	sbi	0x05, 0	; 5
 2e0:	86 e9       	ldi	r24, 0x96	; 150
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	67 cf       	rjmp	.-306    	; 0x1b4 <msDelay>
 2e6:	08 95       	ret

000002e8 <InitDisplay>:
 2e8:	f6 df       	rcall	.-20     	; 0x2d6 <HardwareReset>
 2ea:	81 e1       	ldi	r24, 0x11	; 17
 2ec:	cd df       	rcall	.-102    	; 0x288 <WriteCmd>
 2ee:	86 e9       	ldi	r24, 0x96	; 150
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	60 df       	rcall	.-320    	; 0x1b4 <msDelay>
 2f4:	8a e3       	ldi	r24, 0x3A	; 58
 2f6:	c8 df       	rcall	.-112    	; 0x288 <WriteCmd>
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	c0 df       	rcall	.-128    	; 0x27c <Xfer>
 2fc:	89 e2       	ldi	r24, 0x29	; 41
 2fe:	c4 cf       	rjmp	.-120    	; 0x288 <WriteCmd>
 300:	08 95       	ret

00000302 <SetAddrWindow>:
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	08 2f       	mov	r16, r24
 30c:	d6 2f       	mov	r29, r22
 30e:	14 2f       	mov	r17, r20
 310:	c2 2f       	mov	r28, r18
 312:	8a e2       	ldi	r24, 0x2A	; 42
 314:	b9 df       	rcall	.-142    	; 0x288 <WriteCmd>
 316:	80 2f       	mov	r24, r16
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	ba df       	rcall	.-140    	; 0x290 <WriteWord>
 31c:	81 2f       	mov	r24, r17
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	b7 df       	rcall	.-146    	; 0x290 <WriteWord>
 322:	8b e2       	ldi	r24, 0x2B	; 43
 324:	b1 df       	rcall	.-158    	; 0x288 <WriteCmd>
 326:	8d 2f       	mov	r24, r29
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	b2 df       	rcall	.-156    	; 0x290 <WriteWord>
 32c:	8c 2f       	mov	r24, r28
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	af df       	rcall	.-162    	; 0x290 <WriteWord>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <ClearScreen>:
 33c:	2f e9       	ldi	r18, 0x9F	; 159
 33e:	4f e7       	ldi	r20, 0x7F	; 127
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	de df       	rcall	.-68     	; 0x302 <SetAddrWindow>
 346:	8c e2       	ldi	r24, 0x2C	; 44
 348:	9f df       	rcall	.-194    	; 0x288 <WriteCmd>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 ea       	ldi	r25, 0xA0	; 160
 34e:	1e bc       	out	0x2e, r1	; 46
 350:	0d b4       	in	r0, 0x2d	; 45
 352:	07 fe       	sbrs	r0, 7
 354:	fd cf       	rjmp	.-6      	; 0x350 <ClearScreen+0x14>
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	d1 f7       	brne	.-12     	; 0x34e <ClearScreen+0x12>
 35a:	08 95       	ret

0000035c <VLine>:
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	d6 2f       	mov	r29, r22
 366:	c4 2f       	mov	r28, r20
 368:	89 01       	movw	r16, r18
 36a:	24 2f       	mov	r18, r20
 36c:	48 2f       	mov	r20, r24
 36e:	c9 df       	rcall	.-110    	; 0x302 <SetAddrWindow>
 370:	cd 1b       	sub	r28, r29
 372:	cf 5f       	subi	r28, 0xFF	; 255
 374:	6c 2f       	mov	r22, r28
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	c8 01       	movw	r24, r16
 37a:	92 df       	rcall	.-220    	; 0x2a0 <Write565>
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <FillCircle>:
 386:	4f 92       	push	r4
 388:	5f 92       	push	r5
 38a:	6f 92       	push	r6
 38c:	7f 92       	push	r7
 38e:	9f 92       	push	r9
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	e6 2e       	mov	r14, r22
 3a6:	69 01       	movw	r12, r18
 3a8:	a4 2e       	mov	r10, r20
 3aa:	b1 2c       	mov	r11, r1
 3ac:	aa 9c       	mul	r10, r10
 3ae:	20 01       	movw	r4, r0
 3b0:	ab 9c       	mul	r10, r11
 3b2:	50 0c       	add	r5, r0
 3b4:	50 0c       	add	r5, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	05 2c       	mov	r0, r5
 3ba:	00 0c       	add	r0, r0
 3bc:	66 08       	sbc	r6, r6
 3be:	77 08       	sbc	r7, r7
 3c0:	f8 2e       	mov	r15, r24
 3c2:	d8 2f       	mov	r29, r24
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	00 9f       	mul	r16, r16
 3ca:	c0 01       	movw	r24, r0
 3cc:	01 9f       	mul	r16, r17
 3ce:	90 0d       	add	r25, r0
 3d0:	90 0d       	add	r25, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	09 2e       	mov	r0, r25
 3d6:	00 0c       	add	r0, r0
 3d8:	aa 0b       	sbc	r26, r26
 3da:	bb 0b       	sbc	r27, r27
 3dc:	a3 01       	movw	r20, r6
 3de:	92 01       	movw	r18, r4
 3e0:	28 1b       	sub	r18, r24
 3e2:	39 0b       	sbc	r19, r25
 3e4:	4a 0b       	sbc	r20, r26
 3e6:	5b 0b       	sbc	r21, r27
 3e8:	ca 01       	movw	r24, r20
 3ea:	b9 01       	movw	r22, r18
 3ec:	f4 de       	rcall	.-536    	; 0x1d6 <intsqrt>
 3ee:	9e 2c       	mov	r9, r14
 3f0:	96 1a       	sub	r9, r22
 3f2:	c6 2f       	mov	r28, r22
 3f4:	ce 0d       	add	r28, r14
 3f6:	96 01       	movw	r18, r12
 3f8:	4c 2f       	mov	r20, r28
 3fa:	69 2d       	mov	r22, r9
 3fc:	8d 2f       	mov	r24, r29
 3fe:	ae df       	rcall	.-164    	; 0x35c <VLine>
 400:	96 01       	movw	r18, r12
 402:	4c 2f       	mov	r20, r28
 404:	69 2d       	mov	r22, r9
 406:	8f 2d       	mov	r24, r15
 408:	a9 df       	rcall	.-174    	; 0x35c <VLine>
 40a:	0f 5f       	subi	r16, 0xFF	; 255
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
 40e:	df 5f       	subi	r29, 0xFF	; 255
 410:	fa 94       	dec	r15
 412:	a0 16       	cp	r10, r16
 414:	b1 06       	cpc	r11, r17
 416:	c4 f6       	brge	.-80     	; 0x3c8 <FillCircle+0x42>
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	7f 90       	pop	r7
 430:	6f 90       	pop	r6
 432:	5f 90       	pop	r5
 434:	4f 90       	pop	r4
 436:	08 95       	ret

00000438 <Tick3>:
 438:	2f e1       	ldi	r18, 0x1F	; 31
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	4a e0       	ldi	r20, 0x0A	; 10
 43e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 442:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
 446:	9f df       	rcall	.-194    	; 0x386 <FillCircle>
 448:	84 e6       	ldi	r24, 0x64	; 100
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	b3 de       	rcall	.-666    	; 0x1b4 <msDelay>
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	4a e0       	ldi	r20, 0x0A	; 10
 454:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 458:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
 45c:	94 df       	rcall	.-216    	; 0x386 <FillCircle>
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	08 95       	ret

00000464 <Tick4>:
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	34 e0       	ldi	r19, 0x04	; 4
 468:	48 e0       	ldi	r20, 0x08	; 8
 46a:	69 e6       	ldi	r22, 0x69	; 105
 46c:	84 e6       	ldi	r24, 0x64	; 100
 46e:	8b df       	rcall	.-234    	; 0x386 <FillCircle>
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	34 e0       	ldi	r19, 0x04	; 4
 474:	48 e0       	ldi	r20, 0x08	; 8
 476:	64 e1       	ldi	r22, 0x14	; 20
 478:	82 e3       	ldi	r24, 0x32	; 50
 47a:	85 df       	rcall	.-246    	; 0x386 <FillCircle>
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	34 e0       	ldi	r19, 0x04	; 4
 480:	48 e0       	ldi	r20, 0x08	; 8
 482:	69 e6       	ldi	r22, 0x69	; 105
 484:	82 e3       	ldi	r24, 0x32	; 50
 486:	7f df       	rcall	.-258    	; 0x386 <FillCircle>
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	34 e0       	ldi	r19, 0x04	; 4
 48c:	48 e0       	ldi	r20, 0x08	; 8
 48e:	64 e1       	ldi	r22, 0x14	; 20
 490:	84 e6       	ldi	r24, 0x64	; 100
 492:	79 df       	rcall	.-270    	; 0x386 <FillCircle>
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	08 95       	ret

0000049a <Tick5>:
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	19 f0       	breq	.+6      	; 0x4a4 <Tick5+0xa>
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	31 f1       	breq	.+76     	; 0x4ee <Tick5+0x54>
 4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <Tick5+0x1e>
 4a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
 4a8:	85 50       	subi	r24, 0x05	; 5
 4aa:	8a 31       	cpi	r24, 0x1A	; 26
 4ac:	28 f4       	brcc	.+10     	; 0x4b8 <Tick5+0x1e>
 4ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4b2:	8a 50       	subi	r24, 0x0A	; 10
 4b4:	85 31       	cpi	r24, 0x15	; 21
 4b6:	d8 f0       	brcs	.+54     	; 0x4ee <Tick5+0x54>
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	38 ef       	ldi	r19, 0xF8	; 248
 4bc:	47 e0       	ldi	r20, 0x07	; 7
 4be:	64 e1       	ldi	r22, 0x14	; 20
 4c0:	84 e1       	ldi	r24, 0x14	; 20
 4c2:	61 df       	rcall	.-318    	; 0x386 <FillCircle>
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	38 ef       	ldi	r19, 0xF8	; 248
 4c8:	47 e0       	ldi	r20, 0x07	; 7
 4ca:	69 e6       	ldi	r22, 0x69	; 105
 4cc:	84 e1       	ldi	r24, 0x14	; 20
 4ce:	5b df       	rcall	.-330    	; 0x386 <FillCircle>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	38 ef       	ldi	r19, 0xF8	; 248
 4d4:	47 e0       	ldi	r20, 0x07	; 7
 4d6:	64 e1       	ldi	r22, 0x14	; 20
 4d8:	82 e8       	ldi	r24, 0x82	; 130
 4da:	55 df       	rcall	.-342    	; 0x386 <FillCircle>
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	38 ef       	ldi	r19, 0xF8	; 248
 4e0:	47 e0       	ldi	r20, 0x07	; 7
 4e2:	69 e6       	ldi	r22, 0x69	; 105
 4e4:	82 e8       	ldi	r24, 0x82	; 130
 4e6:	4f df       	rcall	.-354    	; 0x386 <FillCircle>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	08 95       	ret
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	47 e0       	ldi	r20, 0x07	; 7
 4f4:	64 e1       	ldi	r22, 0x14	; 20
 4f6:	84 e1       	ldi	r24, 0x14	; 20
 4f8:	46 df       	rcall	.-372    	; 0x386 <FillCircle>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	08 95       	ret

00000500 <SetOrientation>:
 500:	cf 93       	push	r28
 502:	84 3b       	cpi	r24, 0xB4	; 180
 504:	91 05       	cpc	r25, r1
 506:	41 f0       	breq	.+16     	; 0x518 <SetOrientation+0x18>
 508:	8e 30       	cpi	r24, 0x0E	; 14
 50a:	21 e0       	ldi	r18, 0x01	; 1
 50c:	92 07       	cpc	r25, r18
 50e:	31 f0       	breq	.+12     	; 0x51c <SetOrientation+0x1c>
 510:	8a 35       	cpi	r24, 0x5A	; 90
 512:	91 05       	cpc	r25, r1
 514:	29 f4       	brne	.+10     	; 0x520 <SetOrientation+0x20>
 516:	06 c0       	rjmp	.+12     	; 0x524 <SetOrientation+0x24>
 518:	c0 ec       	ldi	r28, 0xC0	; 192
 51a:	05 c0       	rjmp	.+10     	; 0x526 <SetOrientation+0x26>
 51c:	c0 ea       	ldi	r28, 0xA0	; 160
 51e:	03 c0       	rjmp	.+6      	; 0x526 <SetOrientation+0x26>
 520:	c0 e0       	ldi	r28, 0x00	; 0
 522:	01 c0       	rjmp	.+2      	; 0x526 <SetOrientation+0x26>
 524:	c0 e6       	ldi	r28, 0x60	; 96
 526:	86 e3       	ldi	r24, 0x36	; 54
 528:	af de       	rcall	.-674    	; 0x288 <WriteCmd>
 52a:	8c 2f       	mov	r24, r28
 52c:	a7 de       	rcall	.-690    	; 0x27c <Xfer>
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <ADC_init>:
	int16_t L_R;

//Initialize the ADC
void ADC_init()
{
	ADMUX = (1<<REFS0);
 532:	80 e4       	ldi	r24, 0x40	; 64
 534:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 538:	87 e8       	ldi	r24, 0x87	; 135
 53a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 53e:	08 95       	ret

00000540 <ReadADC>:
//Read from the ADC channel ch
uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel
	ch &= 0x07;
	ADMUX = (ADMUX & 0xF8) | ch;
 540:	ec e7       	ldi	r30, 0x7C	; 124
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	90 81       	ld	r25, Z
 546:	98 7f       	andi	r25, 0xF8	; 248
 548:	87 70       	andi	r24, 0x07	; 7
 54a:	89 2b       	or	r24, r25
 54c:	80 83       	st	Z, r24

	//Start Single conversion
	ADCSRA |= (1 << ADSC);
 54e:	ea e7       	ldi	r30, 0x7A	; 122
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	80 64       	ori	r24, 0x40	; 64
 556:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(ADCSRA & (1 << ADSC));
 558:	80 81       	ld	r24, Z
 55a:	86 fd       	sbrc	r24, 6
 55c:	fd cf       	rjmp	.-6      	; 0x558 <ReadADC+0x18>

	//Clear ADIF
	ADCSRA |= (1<<ADIF);
 55e:	ea e7       	ldi	r30, 0x7A	; 122
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	80 61       	ori	r24, 0x10	; 16
 566:	80 83       	st	Z, r24
	return (ADC);
 568:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 56c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 570:	08 95       	ret

00000572 <moveU_D>:
//handle up-down movement
void moveU_D(int16_t U_D)
{
 572:	9c 01       	movw	r18, r24
	unsigned char tmp = y;
 574:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
	if(U_D > 0)
 578:	12 16       	cp	r1, r18
 57a:	13 06       	cpc	r1, r19
 57c:	34 f4       	brge	.+12     	; 0x58a <moveU_D+0x18>
	{
		if(tmp >= 10)
 57e:	9a 30       	cpi	r25, 0x0A	; 10
 580:	78 f0       	brcs	.+30     	; 0x5a0 <moveU_D+0x2e>
		{
			tmp = (tmp == 7) ? 0 : tmp-5;
 582:	97 30       	cpi	r25, 0x07	; 7
 584:	51 f0       	breq	.+20     	; 0x59a <moveU_D+0x28>
 586:	95 50       	subi	r25, 0x05	; 5
 588:	0b c0       	rjmp	.+22     	; 0x5a0 <moveU_D+0x2e>
		}
	}
	else if(U_D < 0)
 58a:	33 23       	and	r19, r19
 58c:	4c f4       	brge	.+18     	; 0x5a0 <moveU_D+0x2e>
	{
		if(tmp <= 128)
 58e:	91 38       	cpi	r25, 0x81	; 129
 590:	38 f4       	brcc	.+14     	; 0x5a0 <moveU_D+0x2e>
		{
			tmp = (tmp == 0) ? 7 : tmp+5;
 592:	99 23       	and	r25, r25
 594:	21 f0       	breq	.+8      	; 0x59e <moveU_D+0x2c>
 596:	9b 5f       	subi	r25, 0xFB	; 251
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <moveU_D+0x2e>
	unsigned char tmp = y;
	if(U_D > 0)
	{
		if(tmp >= 10)
		{
			tmp = (tmp == 7) ? 0 : tmp-5;
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <moveU_D+0x2e>
	}
	else if(U_D < 0)
	{
		if(tmp <= 128)
		{
			tmp = (tmp == 0) ? 7 : tmp+5;
 59e:	97 e0       	ldi	r25, 0x07	; 7
		}
	}
	y = tmp;
 5a0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 5a4:	08 95       	ret

000005a6 <TickFct_CursorPos_V>:
}

//determines vertical cursor movement from joystick input
enum CPV_States {CPV_Stay, CPV_Move};
int TickFct_CursorPos_V(int state)
{
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ec 01       	movw	r28, r24
	U_D = ReadADC(3);
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	c8 df       	rcall	.-112    	; 0x540 <ReadADC>
	U_D -= 512;
 5b0:	92 50       	subi	r25, 0x02	; 2
 5b2:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <U_D+0x1>
 5b6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <U_D>
	switch(state)//Transitions
 5ba:	20 97       	sbiw	r28, 0x00	; 0
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <TickFct_CursorPos_V+0x1e>
 5be:	21 97       	sbiw	r28, 0x01	; 1
 5c0:	69 f0       	breq	.+26     	; 0x5dc <TickFct_CursorPos_V+0x36>
 5c2:	18 c0       	rjmp	.+48     	; 0x5f4 <TickFct_CursorPos_V+0x4e>
		{
			state = CPV_Stay;
		}
		else
		{
			state = CPV_Move;
 5c4:	51 e0       	ldi	r21, 0x01	; 1
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	9c 01       	movw	r18, r24
 5ca:	28 50       	subi	r18, 0x08	; 8
 5cc:	3f 4f       	sbci	r19, 0xFF	; 255
 5ce:	23 3f       	cpi	r18, 0xF3	; 243
 5d0:	31 40       	sbci	r19, 0x01	; 1
 5d2:	08 f4       	brcc	.+2      	; 0x5d6 <TickFct_CursorPos_V+0x30>
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	c5 2f       	mov	r28, r21
 5d8:	d4 2f       	mov	r29, r20
 5da:	0e c0       	rjmp	.+28     	; 0x5f8 <TickFct_CursorPos_V+0x52>
 5dc:	51 e0       	ldi	r21, 0x01	; 1
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	9c 01       	movw	r18, r24
 5e2:	28 50       	subi	r18, 0x08	; 8
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
 5e6:	23 3f       	cpi	r18, 0xF3	; 243
 5e8:	31 40       	sbci	r19, 0x01	; 1
 5ea:	08 f4       	brcc	.+2      	; 0x5ee <TickFct_CursorPos_V+0x48>
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	c5 2f       	mov	r28, r21
 5f0:	d4 2f       	mov	r29, r20
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <TickFct_CursorPos_V+0x52>
		{
			state = CPV_Move;
		}
		break;
		default:
		state = CPV_Stay;
 5f4:	c0 e0       	ldi	r28, 0x00	; 0
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
		break;
	}
	switch(state)//Actions
 5f8:	c1 30       	cpi	r28, 0x01	; 1
 5fa:	d1 05       	cpc	r29, r1
	{
		case CPV_Stay:
		//cursor_blink = 0;
		break;
		case CPV_Move:
		moveU_D(U_D);
 5fc:	09 f4       	brne	.+2      	; 0x600 <TickFct_CursorPos_V+0x5a>
 5fe:	b9 df       	rcall	.-142    	; 0x572 <moveU_D>
		//cursor_blink = 1;
		//cursor_on = 1;
		break;
	}
	return state;
}
 600:	ce 01       	movw	r24, r28
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <moveL_R>:
	y = tmp;
}

//handle left-right movement
void moveL_R(int16_t L_R)
{
 608:	9c 01       	movw	r18, r24
	unsigned char tmp = x;
 60a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <x>
	if(L_R < 0)
 60e:	33 23       	and	r19, r19
 610:	34 f4       	brge	.+12     	; 0x61e <moveL_R+0x16>
	{
		if(tmp >= 10)
 612:	9a 30       	cpi	r25, 0x0A	; 10
 614:	80 f0       	brcs	.+32     	; 0x636 <moveL_R+0x2e>
		{
			tmp = (tmp == 4) ? 0 : tmp-5;
 616:	94 30       	cpi	r25, 0x04	; 4
 618:	59 f0       	breq	.+22     	; 0x630 <moveL_R+0x28>
 61a:	95 50       	subi	r25, 0x05	; 5
 61c:	0c c0       	rjmp	.+24     	; 0x636 <moveL_R+0x2e>
		}
	}
	else if(L_R > 0)
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	4c f4       	brge	.+18     	; 0x636 <moveL_R+0x2e>
	{
		if(tmp <= 160)
 624:	91 3a       	cpi	r25, 0xA1	; 161
 626:	38 f4       	brcc	.+14     	; 0x636 <moveL_R+0x2e>
		{
			tmp = (tmp == 0) ? 4 : tmp+5;
 628:	99 23       	and	r25, r25
 62a:	21 f0       	breq	.+8      	; 0x634 <moveL_R+0x2c>
 62c:	9b 5f       	subi	r25, 0xFB	; 251
 62e:	03 c0       	rjmp	.+6      	; 0x636 <moveL_R+0x2e>
	unsigned char tmp = x;
	if(L_R < 0)
	{
		if(tmp >= 10)
		{
			tmp = (tmp == 4) ? 0 : tmp-5;
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	01 c0       	rjmp	.+2      	; 0x636 <moveL_R+0x2e>
	}
	else if(L_R > 0)
	{
		if(tmp <= 160)
		{
			tmp = (tmp == 0) ? 4 : tmp+5;
 634:	94 e0       	ldi	r25, 0x04	; 4
		}
	}
	x = tmp;
 636:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <x>
 63a:	08 95       	ret

0000063c <TickFct_CursorPos_H>:
}

//determines horizontal cursor movement from joystick input
enum CPH_States {CPH_Stay, CPH_Move};
int TickFct_CursorPos_H(int state)
{
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	ec 01       	movw	r28, r24
	L_R = ReadADC(2);
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	7d df       	rcall	.-262    	; 0x540 <ReadADC>
	L_R -= 512;
 646:	92 50       	subi	r25, 0x02	; 2
 648:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <L_R+0x1>
 64c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <L_R>
	switch(state)//Transitions
 650:	20 97       	sbiw	r28, 0x00	; 0
 652:	19 f0       	breq	.+6      	; 0x65a <TickFct_CursorPos_H+0x1e>
 654:	21 97       	sbiw	r28, 0x01	; 1
 656:	69 f0       	breq	.+26     	; 0x672 <TickFct_CursorPos_H+0x36>
 658:	18 c0       	rjmp	.+48     	; 0x68a <TickFct_CursorPos_H+0x4e>
		{
			state = CPH_Stay;
		}
		else
		{
			state = CPH_Move;
 65a:	51 e0       	ldi	r21, 0x01	; 1
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	9c 01       	movw	r18, r24
 660:	28 50       	subi	r18, 0x08	; 8
 662:	3f 4f       	sbci	r19, 0xFF	; 255
 664:	23 3f       	cpi	r18, 0xF3	; 243
 666:	31 40       	sbci	r19, 0x01	; 1
 668:	08 f4       	brcc	.+2      	; 0x66c <TickFct_CursorPos_H+0x30>
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	c5 2f       	mov	r28, r21
 66e:	d4 2f       	mov	r29, r20
 670:	0e c0       	rjmp	.+28     	; 0x68e <TickFct_CursorPos_H+0x52>
 672:	51 e0       	ldi	r21, 0x01	; 1
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	9c 01       	movw	r18, r24
 678:	28 50       	subi	r18, 0x08	; 8
 67a:	3f 4f       	sbci	r19, 0xFF	; 255
 67c:	23 3f       	cpi	r18, 0xF3	; 243
 67e:	31 40       	sbci	r19, 0x01	; 1
 680:	08 f4       	brcc	.+2      	; 0x684 <TickFct_CursorPos_H+0x48>
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	c5 2f       	mov	r28, r21
 686:	d4 2f       	mov	r29, r20
 688:	02 c0       	rjmp	.+4      	; 0x68e <TickFct_CursorPos_H+0x52>
		{
			state = CPH_Move;
		}
		break;
		default:
		state = CPH_Stay;
 68a:	c0 e0       	ldi	r28, 0x00	; 0
 68c:	d0 e0       	ldi	r29, 0x00	; 0
		break;
	}
	switch(state)//Actions
 68e:	c1 30       	cpi	r28, 0x01	; 1
 690:	d1 05       	cpc	r29, r1
	{
		case CPH_Stay:
		//cursor_blink = 0;
		break;
		case CPH_Move:
		moveL_R(L_R);
 692:	09 f4       	brne	.+2      	; 0x696 <TickFct_CursorPos_H+0x5a>
 694:	b9 df       	rcall	.-142    	; 0x608 <moveL_R>
		//cursor_blink = 1;
		//cursor_on = 1;
		break;
	}
	return state;
}
 696:	ce 01       	movw	r24, r28
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <main>:
	return state;
}
// ---------------------------------------------------------------------------
// MAIN PROGRAM
int main()
{
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	2a 97       	sbiw	r28, 0x0a	; 10
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x83; PORTA = 0x7C;
 6b2:	83 e8       	ldi	r24, 0x83	; 131
 6b4:	81 b9       	out	0x01, r24	; 1
 6b6:	8c e7       	ldi	r24, 0x7C	; 124
 6b8:	82 b9       	out	0x02, r24	; 2
	unsigned long int SMTick4_period = SMTick4_calc/GCD;
	unsigned long int SMTick5_period = SMTick5_calc/GCD;

	//Declare an array of tasks
	static task task1, task2, task3, task4, task5;
	task *tasks[] = { &task1, &task2, &task3, &task4, &task5 };
 6ba:	8a e0       	ldi	r24, 0x0A	; 10
 6bc:	e6 e0       	ldi	r30, 0x06	; 6
 6be:	f1 e0       	ldi	r31, 0x01	; 1
 6c0:	de 01       	movw	r26, r28
 6c2:	11 96       	adiw	r26, 0x01	; 1
 6c4:	01 90       	ld	r0, Z+
 6c6:	0d 92       	st	X+, r0
 6c8:	8a 95       	dec	r24
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0x26>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	task1.state = -1;//Task initial state.
 6cc:	ec e3       	ldi	r30, 0x3C	; 60
 6ce:	f1 e0       	ldi	r31, 0x01	; 1
 6d0:	2f ef       	ldi	r18, 0xFF	; 255
 6d2:	20 83       	st	Z, r18
	task1.period = SMTick1_period;//Task Period.
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	a0 e0       	ldi	r26, 0x00	; 0
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	81 83       	std	Z+1, r24	; 0x01
 6de:	92 83       	std	Z+2, r25	; 0x02
 6e0:	a3 83       	std	Z+3, r26	; 0x03
 6e2:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 6e4:	85 83       	std	Z+5, r24	; 0x05
 6e6:	96 83       	std	Z+6, r25	; 0x06
 6e8:	a7 83       	std	Z+7, r26	; 0x07
 6ea:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &TickFct_CursorPos_H;//Function pointer for the tick.
 6ec:	4e e1       	ldi	r20, 0x1E	; 30
 6ee:	53 e0       	ldi	r21, 0x03	; 3
 6f0:	52 87       	std	Z+10, r21	; 0x0a
 6f2:	41 87       	std	Z+9, r20	; 0x09

	// Task 2
	task2.state = -1;//Task initial state.
 6f4:	e1 e3       	ldi	r30, 0x31	; 49
 6f6:	f1 e0       	ldi	r31, 0x01	; 1
 6f8:	20 83       	st	Z, r18
	task2.period = SMTick2_period;//Task Period.
 6fa:	81 83       	std	Z+1, r24	; 0x01
 6fc:	92 83       	std	Z+2, r25	; 0x02
 6fe:	a3 83       	std	Z+3, r26	; 0x03
 700:	b4 83       	std	Z+4, r27	; 0x04
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 702:	85 83       	std	Z+5, r24	; 0x05
 704:	96 83       	std	Z+6, r25	; 0x06
 706:	a7 83       	std	Z+7, r26	; 0x07
 708:	b0 87       	std	Z+8, r27	; 0x08
	task2.TickFct = &TickFct_CursorPos_V;//Function pointer for the tick.
 70a:	43 ed       	ldi	r20, 0xD3	; 211
 70c:	52 e0       	ldi	r21, 0x02	; 2
 70e:	52 87       	std	Z+10, r21	; 0x0a
 710:	41 87       	std	Z+9, r20	; 0x09
	
	// Task 3
	task3.state = -1;//Task initial state.
 712:	e6 e2       	ldi	r30, 0x26	; 38
 714:	f1 e0       	ldi	r31, 0x01	; 1
 716:	20 83       	st	Z, r18
	task3.period = SMTick3_period;//Task Period.
 718:	81 83       	std	Z+1, r24	; 0x01
 71a:	92 83       	std	Z+2, r25	; 0x02
 71c:	a3 83       	std	Z+3, r26	; 0x03
 71e:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = SMTick3_period; // Task current elasped time.
 720:	85 83       	std	Z+5, r24	; 0x05
 722:	96 83       	std	Z+6, r25	; 0x06
 724:	a7 83       	std	Z+7, r26	; 0x07
 726:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &Tick3; // Function pointer for the tick.
 728:	4c e1       	ldi	r20, 0x1C	; 28
 72a:	52 e0       	ldi	r21, 0x02	; 2
 72c:	52 87       	std	Z+10, r21	; 0x0a
 72e:	41 87       	std	Z+9, r20	; 0x09
	
	// Task 4
	task4.state = -1;//Task initial state.
 730:	eb e1       	ldi	r30, 0x1B	; 27
 732:	f1 e0       	ldi	r31, 0x01	; 1
 734:	20 83       	st	Z, r18
	task4.period = SMTick4_period;//Task Period.
 736:	81 83       	std	Z+1, r24	; 0x01
 738:	92 83       	std	Z+2, r25	; 0x02
 73a:	a3 83       	std	Z+3, r26	; 0x03
 73c:	b4 83       	std	Z+4, r27	; 0x04
	task4.elapsedTime = SMTick4_period; // Task current elasped time.
 73e:	85 83       	std	Z+5, r24	; 0x05
 740:	96 83       	std	Z+6, r25	; 0x06
 742:	a7 83       	std	Z+7, r26	; 0x07
 744:	b0 87       	std	Z+8, r27	; 0x08
	task4.TickFct = &Tick4; // Function pointer for the tick.
 746:	42 e3       	ldi	r20, 0x32	; 50
 748:	52 e0       	ldi	r21, 0x02	; 2
 74a:	52 87       	std	Z+10, r21	; 0x0a
 74c:	41 87       	std	Z+9, r20	; 0x09
	
	// Task 5
	task5.state = -1;//Task initial state.
 74e:	e0 e1       	ldi	r30, 0x10	; 16
 750:	f1 e0       	ldi	r31, 0x01	; 1
 752:	20 83       	st	Z, r18
	task5.period = SMTick5_period;//Task Period.
 754:	81 83       	std	Z+1, r24	; 0x01
 756:	92 83       	std	Z+2, r25	; 0x02
 758:	a3 83       	std	Z+3, r26	; 0x03
 75a:	b4 83       	std	Z+4, r27	; 0x04
	task5.elapsedTime = SMTick5_period; // Task current elasped time.
 75c:	85 83       	std	Z+5, r24	; 0x05
 75e:	96 83       	std	Z+6, r25	; 0x06
 760:	a7 83       	std	Z+7, r26	; 0x07
 762:	b0 87       	std	Z+8, r27	; 0x08
	task5.TickFct = &Tick5; // Function pointer for the tick.
 764:	8d e4       	ldi	r24, 0x4D	; 77
 766:	92 e0       	ldi	r25, 0x02	; 2
 768:	92 87       	std	Z+10, r25	; 0x0a
 76a:	81 87       	std	Z+9, r24	; 0x09

	//Set Initial Conditions
	TimerSet(GCD);
 76c:	62 e3       	ldi	r22, 0x32	; 50
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	a9 dc       	rcall	.-1710   	; 0xc8 <TimerSet>
	TimerOn();
 776:	b9 dc       	rcall	.-1678   	; 0xea <TimerOn>
	ADC_init();
 778:	dc de       	rcall	.-584    	; 0x532 <ADC_init>
	SetupPorts(); // use PortB for LCD interface
 77a:	17 dd       	rcall	.-1490   	; 0x1aa <SetupPorts>
	OpenSPI(); // start communication to TFT
 77c:	79 dd       	rcall	.-1294   	; 0x270 <OpenSPI>
	InitDisplay(); // initialize TFT controller
 77e:	b4 dd       	rcall	.-1176   	; 0x2e8 <InitDisplay>
 780:	dd dd       	rcall	.-1094   	; 0x33c <ClearScreen>
	ClearScreen();
 782:	8a e5       	ldi	r24, 0x5A	; 90
 784:	90 e0       	ldi	r25, 0x00	; 0
	SetOrientation(90);
 786:	bc de       	rcall	.-648    	; 0x500 <SetOrientation>
 788:	7e 01       	movw	r14, r28
 78a:	8b e0       	ldi	r24, 0x0B	; 11
 78c:	e8 0e       	add	r14, r24
 78e:	f1 1c       	adc	r15, r1
 790:	de 01       	movw	r26, r28
 792:	11 96       	adiw	r26, 0x01	; 1
 794:	6d 01       	movw	r12, r26
 796:	f6 01       	movw	r30, r12
 798:	01 91       	ld	r16, Z+
 79a:	11 91       	ld	r17, Z+
 unsigned short i; // Scheduler for-loop iterator
 while(1) {
	 // Scheduler code
	 for ( i = 0; i < numTasks; i++ ) {
		 // Task is ready to tick
		 if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 79c:	6f 01       	movw	r12, r30
 79e:	d8 01       	movw	r26, r16
 7a0:	15 96       	adiw	r26, 0x05	; 5
 7a2:	4d 91       	ld	r20, X+
 7a4:	5d 91       	ld	r21, X+
 7a6:	6d 91       	ld	r22, X+
 7a8:	7c 91       	ld	r23, X
 7aa:	18 97       	sbiw	r26, 0x08	; 8
 7ac:	11 96       	adiw	r26, 0x01	; 1
 7ae:	8d 91       	ld	r24, X+
 7b0:	9d 91       	ld	r25, X+
 7b2:	0d 90       	ld	r0, X+
 7b4:	bc 91       	ld	r27, X
 7b6:	a0 2d       	mov	r26, r0
 7b8:	48 17       	cp	r20, r24
 7ba:	59 07       	cpc	r21, r25
 7bc:	6a 07       	cpc	r22, r26
 7be:	7b 07       	cpc	r23, r27
 7c0:	81 f4       	brne	.+32     	; 0x7e2 <main+0x144>
 7c2:	f8 01       	movw	r30, r16
 7c4:	80 81       	ld	r24, Z
 7c6:	01 84       	ldd	r0, Z+9	; 0x09
			 // Setting next state for task
			 tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 7c8:	f2 85       	ldd	r31, Z+10	; 0x0a
 7ca:	e0 2d       	mov	r30, r0
 7cc:	08 2e       	mov	r0, r24
 7ce:	00 0c       	add	r0, r0
 7d0:	99 0b       	sbc	r25, r25
 7d2:	09 95       	icall
 7d4:	d8 01       	movw	r26, r16
 7d6:	8c 93       	st	X, r24
 7d8:	f8 01       	movw	r30, r16
 7da:	15 82       	std	Z+5, r1	; 0x05
 7dc:	16 82       	std	Z+6, r1	; 0x06
			 // Reset the elapsed time for next tick.
			 tasks[i]->elapsedTime = 0;
 7de:	17 82       	std	Z+7, r1	; 0x07
 7e0:	10 86       	std	Z+8, r1	; 0x08
 7e2:	f8 01       	movw	r30, r16
 7e4:	85 81       	ldd	r24, Z+5	; 0x05
 7e6:	96 81       	ldd	r25, Z+6	; 0x06
		 }
		 tasks[i]->elapsedTime += 1;
 7e8:	a7 81       	ldd	r26, Z+7	; 0x07
 7ea:	b0 85       	ldd	r27, Z+8	; 0x08
 7ec:	01 96       	adiw	r24, 0x01	; 1
 7ee:	a1 1d       	adc	r26, r1
 7f0:	b1 1d       	adc	r27, r1
 7f2:	85 83       	std	Z+5, r24	; 0x05
 7f4:	96 83       	std	Z+6, r25	; 0x06
 7f6:	a7 83       	std	Z+7, r26	; 0x07
 7f8:	b0 87       	std	Z+8, r27	; 0x08
 7fa:	ec 14       	cp	r14, r12
 7fc:	fd 04       	cpc	r15, r13
 7fe:	59 f6       	brne	.-106    	; 0x796 <main+0xf8>
  }
  */
 unsigned short i; // Scheduler for-loop iterator
 while(1) {
	 // Scheduler code
	 for ( i = 0; i < numTasks; i++ ) {
 800:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <TimerFlag>
 804:	88 23       	and	r24, r24
			 // Reset the elapsed time for next tick.
			 tasks[i]->elapsedTime = 0;
		 }
		 tasks[i]->elapsedTime += 1;
	 }
	 while(!TimerFlag);
 806:	e1 f3       	breq	.-8      	; 0x800 <main+0x162>
 808:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <TimerFlag>
 80c:	c1 cf       	rjmp	.-126    	; 0x790 <main+0xf2>

0000080e <__mulsi3>:
	 TimerFlag = 0;
 80e:	db 01       	movw	r26, r22
 810:	8f 93       	push	r24
 }
 812:	9f 93       	push	r25
 814:	0b d0       	rcall	.+22     	; 0x82c <__muluhisi3>
 816:	bf 91       	pop	r27
 818:	af 91       	pop	r26
 81a:	a2 9f       	mul	r26, r18
 81c:	80 0d       	add	r24, r0
 81e:	91 1d       	adc	r25, r1
 820:	a3 9f       	mul	r26, r19
 822:	90 0d       	add	r25, r0
 824:	b2 9f       	mul	r27, r18
 826:	90 0d       	add	r25, r0
 828:	11 24       	eor	r1, r1
 82a:	08 95       	ret

0000082c <__muluhisi3>:
 82c:	09 d0       	rcall	.+18     	; 0x840 <__umulhisi3>
 82e:	a5 9f       	mul	r26, r21
 830:	90 0d       	add	r25, r0
 832:	b4 9f       	mul	r27, r20
 834:	90 0d       	add	r25, r0
 836:	a4 9f       	mul	r26, r20
 838:	80 0d       	add	r24, r0
 83a:	91 1d       	adc	r25, r1
 83c:	11 24       	eor	r1, r1
 83e:	08 95       	ret

00000840 <__umulhisi3>:
 840:	a2 9f       	mul	r26, r18
 842:	b0 01       	movw	r22, r0
 844:	b3 9f       	mul	r27, r19
 846:	c0 01       	movw	r24, r0
 848:	a3 9f       	mul	r26, r19
 84a:	70 0d       	add	r23, r0
 84c:	81 1d       	adc	r24, r1
 84e:	11 24       	eor	r1, r1
 850:	91 1d       	adc	r25, r1
 852:	b2 9f       	mul	r27, r18
 854:	70 0d       	add	r23, r0
 856:	81 1d       	adc	r24, r1
 858:	11 24       	eor	r1, r1
 85a:	91 1d       	adc	r25, r1
 85c:	08 95       	ret

0000085e <_exit>:
 85e:	f8 94       	cli

00000860 <__stop_program>:
 860:	ff cf       	rjmp	.-2      	; 0x860 <__stop_program>

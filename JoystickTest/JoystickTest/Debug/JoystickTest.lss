
JoystickTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000660  000006f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800106  00800106  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000257f  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8f  00000000  00000000  00002ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f85  00000000  00000000  00003a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  000049e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000802  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b3  00000000  00000000  000058d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007b85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	71 d2       	rcall	.+1250   	; 0x5a6 <main>
  c4:	cb c2       	rjmp	.+1430   	; 0x65c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		FillCircle (i, 70, 15, RED);
		msDelay(100);
		FillCircle (i, 70, 15, BLACK);
		//msDelay(100);
	}
}
  c8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
  cc:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
  d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
  d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
  d8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
  dc:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
  e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
  e4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 10e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 112:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 116:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 11a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 11e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 122:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 126:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 148:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 14c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 150:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 15e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 162:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 166:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 180:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 184:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 18c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 190:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 194:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <SetupPorts>:
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	84 b9       	out	0x04, r24	; 4
 1ae:	17 b8       	out	0x07, r1	; 7
 1b0:	28 9a       	sbi	0x05, 0	; 5
 1b2:	08 95       	ret

000001b4 <msDelay>:
 1b4:	18 16       	cp	r1, r24
 1b6:	19 06       	cpc	r1, r25
 1b8:	6c f4       	brge	.+26     	; 0x1d4 <msDelay+0x20>
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	ef e9       	ldi	r30, 0x9F	; 159
 1c0:	ff e0       	ldi	r31, 0x0F	; 15
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <msDelay+0xe>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <msDelay+0x14>
 1c8:	00 00       	nop
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	82 17       	cp	r24, r18
 1d0:	93 07       	cpc	r25, r19
 1d2:	a9 f7       	brne	.-22     	; 0x1be <msDelay+0xa>
 1d4:	08 95       	ret

000001d6 <intsqrt>:
 1d6:	4f 92       	push	r4
 1d8:	5f 92       	push	r5
 1da:	6f 92       	push	r6
 1dc:	7f 92       	push	r7
 1de:	8f 92       	push	r8
 1e0:	9f 92       	push	r9
 1e2:	af 92       	push	r10
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	2b 01       	movw	r4, r22
 1f0:	3c 01       	movw	r6, r24
 1f2:	67 2b       	or	r22, r23
 1f4:	68 2b       	or	r22, r24
 1f6:	69 2b       	or	r22, r25
 1f8:	49 f1       	breq	.+82     	; 0x24c <intsqrt+0x76>
 1fa:	e0 e1       	ldi	r30, 0x10	; 16
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	c1 2c       	mov	r12, r1
 200:	d1 2c       	mov	r13, r1
 202:	76 01       	movw	r14, r12
 204:	81 2c       	mov	r8, r1
 206:	91 2c       	mov	r9, r1
 208:	54 01       	movw	r10, r8
 20a:	68 94       	set
 20c:	97 f8       	bld	r9, 7
 20e:	c8 28       	or	r12, r8
 210:	d9 28       	or	r13, r9
 212:	ea 28       	or	r14, r10
 214:	fb 28       	or	r15, r11
 216:	a7 01       	movw	r20, r14
 218:	96 01       	movw	r18, r12
 21a:	c7 01       	movw	r24, r14
 21c:	b6 01       	movw	r22, r12
 21e:	f6 d1       	rcall	.+1004   	; 0x60c <__mulsi3>
 220:	46 16       	cp	r4, r22
 222:	57 06       	cpc	r5, r23
 224:	68 06       	cpc	r6, r24
 226:	79 06       	cpc	r7, r25
 228:	50 f4       	brcc	.+20     	; 0x23e <intsqrt+0x68>
 22a:	d5 01       	movw	r26, r10
 22c:	c4 01       	movw	r24, r8
 22e:	80 95       	com	r24
 230:	90 95       	com	r25
 232:	a0 95       	com	r26
 234:	b0 95       	com	r27
 236:	c8 22       	and	r12, r24
 238:	d9 22       	and	r13, r25
 23a:	ea 22       	and	r14, r26
 23c:	fb 22       	and	r15, r27
 23e:	b6 94       	lsr	r11
 240:	a7 94       	ror	r10
 242:	97 94       	ror	r9
 244:	87 94       	ror	r8
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	11 f7       	brne	.-60     	; 0x20e <intsqrt+0x38>
 24a:	03 c0       	rjmp	.+6      	; 0x252 <intsqrt+0x7c>
 24c:	c1 2c       	mov	r12, r1
 24e:	d1 2c       	mov	r13, r1
 250:	76 01       	movw	r14, r12
 252:	c7 01       	movw	r24, r14
 254:	b6 01       	movw	r22, r12
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	af 90       	pop	r10
 262:	9f 90       	pop	r9
 264:	8f 90       	pop	r8
 266:	7f 90       	pop	r7
 268:	6f 90       	pop	r6
 26a:	5f 90       	pop	r5
 26c:	4f 90       	pop	r4
 26e:	08 95       	ret

00000270 <OpenSPI>:
 270:	80 e5       	ldi	r24, 0x50	; 80
 272:	8c bd       	out	0x2c, r24	; 44
 274:	8d b5       	in	r24, 0x2d	; 45
 276:	81 60       	ori	r24, 0x01	; 1
 278:	8d bd       	out	0x2d, r24	; 45
 27a:	08 95       	ret

0000027c <Xfer>:
 27c:	8e bd       	out	0x2e, r24	; 46
 27e:	0d b4       	in	r0, 0x2d	; 45
 280:	07 fe       	sbrs	r0, 7
 282:	fd cf       	rjmp	.-6      	; 0x27e <Xfer+0x2>
 284:	8e b5       	in	r24, 0x2e	; 46
 286:	08 95       	ret

00000288 <WriteCmd>:
 288:	29 98       	cbi	0x05, 1	; 5
 28a:	f8 df       	rcall	.-16     	; 0x27c <Xfer>
 28c:	29 9a       	sbi	0x05, 1	; 5
 28e:	08 95       	ret

00000290 <WriteWord>:
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
 294:	89 2f       	mov	r24, r25
 296:	f2 df       	rcall	.-28     	; 0x27c <Xfer>
 298:	8c 2f       	mov	r24, r28
 29a:	f0 df       	rcall	.-32     	; 0x27c <Xfer>
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <Write565>:
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	08 2f       	mov	r16, r24
 2aa:	19 2f       	mov	r17, r25
 2ac:	eb 01       	movw	r28, r22
 2ae:	8c e2       	ldi	r24, 0x2C	; 44
 2b0:	eb df       	rcall	.-42     	; 0x288 <WriteCmd>
 2b2:	20 97       	sbiw	r28, 0x00	; 0
 2b4:	59 f0       	breq	.+22     	; 0x2cc <Write565+0x2c>
 2b6:	91 2f       	mov	r25, r17
 2b8:	9e bd       	out	0x2e, r25	; 46
 2ba:	0d b4       	in	r0, 0x2d	; 45
 2bc:	07 fe       	sbrs	r0, 7
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <Write565+0x1a>
 2c0:	0e bd       	out	0x2e, r16	; 46
 2c2:	0d b4       	in	r0, 0x2d	; 45
 2c4:	07 fe       	sbrs	r0, 7
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <Write565+0x22>
 2c8:	21 97       	sbiw	r28, 0x01	; 1
 2ca:	b1 f7       	brne	.-20     	; 0x2b8 <Write565+0x18>
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	08 95       	ret

000002d6 <HardwareReset>:
 2d6:	28 98       	cbi	0x05, 0	; 5
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	6b df       	rcall	.-298    	; 0x1b4 <msDelay>
 2de:	28 9a       	sbi	0x05, 0	; 5
 2e0:	86 e9       	ldi	r24, 0x96	; 150
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	67 cf       	rjmp	.-306    	; 0x1b4 <msDelay>
 2e6:	08 95       	ret

000002e8 <InitDisplay>:
 2e8:	f6 df       	rcall	.-20     	; 0x2d6 <HardwareReset>
 2ea:	81 e1       	ldi	r24, 0x11	; 17
 2ec:	cd df       	rcall	.-102    	; 0x288 <WriteCmd>
 2ee:	86 e9       	ldi	r24, 0x96	; 150
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	60 df       	rcall	.-320    	; 0x1b4 <msDelay>
 2f4:	8a e3       	ldi	r24, 0x3A	; 58
 2f6:	c8 df       	rcall	.-112    	; 0x288 <WriteCmd>
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	c0 df       	rcall	.-128    	; 0x27c <Xfer>
 2fc:	89 e2       	ldi	r24, 0x29	; 41
 2fe:	c4 cf       	rjmp	.-120    	; 0x288 <WriteCmd>
 300:	08 95       	ret

00000302 <SetAddrWindow>:
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	08 2f       	mov	r16, r24
 30c:	d6 2f       	mov	r29, r22
 30e:	14 2f       	mov	r17, r20
 310:	c2 2f       	mov	r28, r18
 312:	8a e2       	ldi	r24, 0x2A	; 42
 314:	b9 df       	rcall	.-142    	; 0x288 <WriteCmd>
 316:	80 2f       	mov	r24, r16
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	ba df       	rcall	.-140    	; 0x290 <WriteWord>
 31c:	81 2f       	mov	r24, r17
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	b7 df       	rcall	.-146    	; 0x290 <WriteWord>
 322:	8b e2       	ldi	r24, 0x2B	; 43
 324:	b1 df       	rcall	.-158    	; 0x288 <WriteCmd>
 326:	8d 2f       	mov	r24, r29
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	b2 df       	rcall	.-156    	; 0x290 <WriteWord>
 32c:	8c 2f       	mov	r24, r28
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	af df       	rcall	.-162    	; 0x290 <WriteWord>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <ClearScreen>:
 33c:	2f e9       	ldi	r18, 0x9F	; 159
 33e:	4f e7       	ldi	r20, 0x7F	; 127
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	de df       	rcall	.-68     	; 0x302 <SetAddrWindow>
 346:	8c e2       	ldi	r24, 0x2C	; 44
 348:	9f df       	rcall	.-194    	; 0x288 <WriteCmd>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 ea       	ldi	r25, 0xA0	; 160
 34e:	1e bc       	out	0x2e, r1	; 46
 350:	0d b4       	in	r0, 0x2d	; 45
 352:	07 fe       	sbrs	r0, 7
 354:	fd cf       	rjmp	.-6      	; 0x350 <ClearScreen+0x14>
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	d1 f7       	brne	.-12     	; 0x34e <ClearScreen+0x12>
 35a:	08 95       	ret

0000035c <VLine>:
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	d6 2f       	mov	r29, r22
 366:	c4 2f       	mov	r28, r20
 368:	89 01       	movw	r16, r18
 36a:	24 2f       	mov	r18, r20
 36c:	48 2f       	mov	r20, r24
 36e:	c9 df       	rcall	.-110    	; 0x302 <SetAddrWindow>
 370:	cd 1b       	sub	r28, r29
 372:	cf 5f       	subi	r28, 0xFF	; 255
 374:	6c 2f       	mov	r22, r28
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	c8 01       	movw	r24, r16
 37a:	92 df       	rcall	.-220    	; 0x2a0 <Write565>
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <FillCircle>:
 386:	4f 92       	push	r4
 388:	5f 92       	push	r5
 38a:	6f 92       	push	r6
 38c:	7f 92       	push	r7
 38e:	9f 92       	push	r9
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	e6 2e       	mov	r14, r22
 3a6:	69 01       	movw	r12, r18
 3a8:	a4 2e       	mov	r10, r20
 3aa:	b1 2c       	mov	r11, r1
 3ac:	aa 9c       	mul	r10, r10
 3ae:	20 01       	movw	r4, r0
 3b0:	ab 9c       	mul	r10, r11
 3b2:	50 0c       	add	r5, r0
 3b4:	50 0c       	add	r5, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	05 2c       	mov	r0, r5
 3ba:	00 0c       	add	r0, r0
 3bc:	66 08       	sbc	r6, r6
 3be:	77 08       	sbc	r7, r7
 3c0:	f8 2e       	mov	r15, r24
 3c2:	d8 2f       	mov	r29, r24
 3c4:	00 e0       	ldi	r16, 0x00	; 0
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	00 9f       	mul	r16, r16
 3ca:	c0 01       	movw	r24, r0
 3cc:	01 9f       	mul	r16, r17
 3ce:	90 0d       	add	r25, r0
 3d0:	90 0d       	add	r25, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	09 2e       	mov	r0, r25
 3d6:	00 0c       	add	r0, r0
 3d8:	aa 0b       	sbc	r26, r26
 3da:	bb 0b       	sbc	r27, r27
 3dc:	a3 01       	movw	r20, r6
 3de:	92 01       	movw	r18, r4
 3e0:	28 1b       	sub	r18, r24
 3e2:	39 0b       	sbc	r19, r25
 3e4:	4a 0b       	sbc	r20, r26
 3e6:	5b 0b       	sbc	r21, r27
 3e8:	ca 01       	movw	r24, r20
 3ea:	b9 01       	movw	r22, r18
 3ec:	f4 de       	rcall	.-536    	; 0x1d6 <intsqrt>
 3ee:	9e 2c       	mov	r9, r14
 3f0:	96 1a       	sub	r9, r22
 3f2:	c6 2f       	mov	r28, r22
 3f4:	ce 0d       	add	r28, r14
 3f6:	96 01       	movw	r18, r12
 3f8:	4c 2f       	mov	r20, r28
 3fa:	69 2d       	mov	r22, r9
 3fc:	8d 2f       	mov	r24, r29
 3fe:	ae df       	rcall	.-164    	; 0x35c <VLine>
 400:	96 01       	movw	r18, r12
 402:	4c 2f       	mov	r20, r28
 404:	69 2d       	mov	r22, r9
 406:	8f 2d       	mov	r24, r15
 408:	a9 df       	rcall	.-174    	; 0x35c <VLine>
 40a:	0f 5f       	subi	r16, 0xFF	; 255
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
 40e:	df 5f       	subi	r29, 0xFF	; 255
 410:	fa 94       	dec	r15
 412:	a0 16       	cp	r10, r16
 414:	b1 06       	cpc	r11, r17
 416:	c4 f6       	brge	.-80     	; 0x3c8 <FillCircle+0x42>
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	7f 90       	pop	r7
 430:	6f 90       	pop	r6
 432:	5f 90       	pop	r5
 434:	4f 90       	pop	r4
 436:	08 95       	ret

00000438 <SetOrientation>:
 438:	cf 93       	push	r28
 43a:	84 3b       	cpi	r24, 0xB4	; 180
 43c:	91 05       	cpc	r25, r1
 43e:	41 f0       	breq	.+16     	; 0x450 <SetOrientation+0x18>
 440:	8e 30       	cpi	r24, 0x0E	; 14
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	92 07       	cpc	r25, r18
 446:	31 f0       	breq	.+12     	; 0x454 <SetOrientation+0x1c>
 448:	8a 35       	cpi	r24, 0x5A	; 90
 44a:	91 05       	cpc	r25, r1
 44c:	29 f4       	brne	.+10     	; 0x458 <SetOrientation+0x20>
 44e:	06 c0       	rjmp	.+12     	; 0x45c <SetOrientation+0x24>
 450:	c0 ec       	ldi	r28, 0xC0	; 192
 452:	05 c0       	rjmp	.+10     	; 0x45e <SetOrientation+0x26>
 454:	c0 ea       	ldi	r28, 0xA0	; 160
 456:	03 c0       	rjmp	.+6      	; 0x45e <SetOrientation+0x26>
 458:	c0 e0       	ldi	r28, 0x00	; 0
 45a:	01 c0       	rjmp	.+2      	; 0x45e <SetOrientation+0x26>
 45c:	c0 e6       	ldi	r28, 0x60	; 96
 45e:	86 e3       	ldi	r24, 0x36	; 54
 460:	13 df       	rcall	.-474    	; 0x288 <WriteCmd>
 462:	8c 2f       	mov	r24, r28
 464:	0b df       	rcall	.-490    	; 0x27c <Xfer>
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <ADC_init>:

//Initialize the ADC
void ADC_init()
{
	ADMUX = (1<<REFS0);
 46a:	80 e4       	ldi	r24, 0x40	; 64
 46c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 470:	87 e8       	ldi	r24, 0x87	; 135
 472:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 476:	08 95       	ret

00000478 <ReadADC>:
//Read from the ADC channel ch
uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel
	ch &= 0x07;
	ADMUX = (ADMUX & 0xF8) | ch;
 478:	ec e7       	ldi	r30, 0x7C	; 124
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	90 81       	ld	r25, Z
 47e:	98 7f       	andi	r25, 0xF8	; 248
 480:	87 70       	andi	r24, 0x07	; 7
 482:	89 2b       	or	r24, r25
 484:	80 83       	st	Z, r24

	//Start Single conversion
	ADCSRA |= (1 << ADSC);
 486:	ea e7       	ldi	r30, 0x7A	; 122
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	80 64       	ori	r24, 0x40	; 64
 48e:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(ADCSRA & (1 << ADSC));
 490:	80 81       	ld	r24, Z
 492:	86 fd       	sbrc	r24, 6
 494:	fd cf       	rjmp	.-6      	; 0x490 <ReadADC+0x18>

	//Clear ADIF
	ADCSRA |= (1<<ADIF);
 496:	ea e7       	ldi	r30, 0x7A	; 122
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	80 61       	ori	r24, 0x10	; 16
 49e:	80 83       	st	Z, r24
	return (ADC);
 4a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 4a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 4a8:	08 95       	ret

000004aa <moveU_D>:
//handle up-down movement
void moveU_D(int16_t U_D)
{
 4aa:	9c 01       	movw	r18, r24
	u_char tmp = y;
 4ac:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
	if(U_D > 0)
 4b0:	12 16       	cp	r1, r18
 4b2:	13 06       	cpc	r1, r19
 4b4:	24 f4       	brge	.+8      	; 0x4be <moveU_D+0x14>
	{
		tmp = (tmp == 7) ? 0 : tmp-1;
 4b6:	97 30       	cpi	r25, 0x07	; 7
 4b8:	41 f0       	breq	.+16     	; 0x4ca <moveU_D+0x20>
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <moveU_D+0x26>
	}
	else if(U_D < 0)
 4be:	33 23       	and	r19, r19
 4c0:	3c f4       	brge	.+14     	; 0x4d0 <moveU_D+0x26>
	{
		tmp = (tmp == 0) ? 7 : tmp+1;
 4c2:	99 23       	and	r25, r25
 4c4:	21 f0       	breq	.+8      	; 0x4ce <moveU_D+0x24>
 4c6:	9f 5f       	subi	r25, 0xFF	; 255
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <moveU_D+0x26>
void moveU_D(int16_t U_D)
{
	u_char tmp = y;
	if(U_D > 0)
	{
		tmp = (tmp == 7) ? 0 : tmp-1;
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <moveU_D+0x26>
	}
	else if(U_D < 0)
	{
		tmp = (tmp == 0) ? 7 : tmp+1;
 4ce:	97 e0       	ldi	r25, 0x07	; 7
	}
	y = tmp;
 4d0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 4d4:	08 95       	ret

000004d6 <moveL_R>:
}

//handle left-right movement
void moveL_R(int16_t L_R)
{
 4d6:	9c 01       	movw	r18, r24
	u_char tmp = x;
 4d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <x>
	if(L_R < 0)
 4dc:	33 23       	and	r19, r19
 4de:	24 f4       	brge	.+8      	; 0x4e8 <moveL_R+0x12>
	{
		tmp = (tmp == 4) ? 0 : tmp-1;
 4e0:	94 30       	cpi	r25, 0x04	; 4
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <moveL_R+0x20>
 4e4:	91 50       	subi	r25, 0x01	; 1
 4e6:	0a c0       	rjmp	.+20     	; 0x4fc <moveL_R+0x26>
	}
	else if(L_R > 0)
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	3c f4       	brge	.+14     	; 0x4fc <moveL_R+0x26>
	{
		tmp = (tmp == 0) ? 4 : tmp+1;
 4ee:	99 23       	and	r25, r25
 4f0:	21 f0       	breq	.+8      	; 0x4fa <moveL_R+0x24>
 4f2:	9f 5f       	subi	r25, 0xFF	; 255
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <moveL_R+0x26>
void moveL_R(int16_t L_R)
{
	u_char tmp = x;
	if(L_R < 0)
	{
		tmp = (tmp == 4) ? 0 : tmp-1;
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <moveL_R+0x26>
	}
	else if(L_R > 0)
	{
		tmp = (tmp == 0) ? 4 : tmp+1;
 4fa:	94 e0       	ldi	r25, 0x04	; 4
	}
	x = tmp;
 4fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <x>
 500:	08 95       	ret

00000502 <TickFct_CursorPos_H>:

//determines horizontal cursor movement from joystick input
enum CPH_States {CPH_Wait, CPH_Read, CPH_Stay, CPH_Move, CPH_Ack} CP_state;
int TickFct_CursorPos_H()
{
	L_R = ReadADC(2);
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	b9 df       	rcall	.-142    	; 0x478 <ReadADC>
	L_R -= 512;
 506:	92 50       	subi	r25, 0x02	; 2
 508:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <L_R+0x1>
 50c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <L_R>
	switch(CP_state)//Transitions
 510:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <CP_state>
 514:	22 30       	cpi	r18, 0x02	; 2
 516:	19 f0       	breq	.+6      	; 0x51e <TickFct_CursorPos_H+0x1c>
 518:	23 30       	cpi	r18, 0x03	; 3
 51a:	59 f0       	breq	.+22     	; 0x532 <TickFct_CursorPos_H+0x30>
 51c:	14 c0       	rjmp	.+40     	; 0x546 <TickFct_CursorPos_H+0x44>
	{
		case CPH_Stay:
		if((L_R <= 250) && (L_R > -249))
 51e:	9c 01       	movw	r18, r24
 520:	28 50       	subi	r18, 0x08	; 8
 522:	3f 4f       	sbci	r19, 0xFF	; 255
 524:	23 3f       	cpi	r18, 0xF3	; 243
 526:	31 40       	sbci	r19, 0x01	; 1
 528:	98 f0       	brcs	.+38     	; 0x550 <TickFct_CursorPos_H+0x4e>
		{
			CP_state = CPH_Stay;
		}
		else
		{
			CP_state = CPH_Move;
 52a:	23 e0       	ldi	r18, 0x03	; 3
 52c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <CP_state>
 530:	0e c0       	rjmp	.+28     	; 0x54e <TickFct_CursorPos_H+0x4c>
		}
		break;
		case CPH_Move:
		if((L_R <= 250) && (L_R > -249))
 532:	9c 01       	movw	r18, r24
 534:	28 50       	subi	r18, 0x08	; 8
 536:	3f 4f       	sbci	r19, 0xFF	; 255
 538:	23 3f       	cpi	r18, 0xF3	; 243
 53a:	31 40       	sbci	r19, 0x01	; 1
 53c:	40 f4       	brcc	.+16     	; 0x54e <TickFct_CursorPos_H+0x4c>
		{
			CP_state = CPH_Stay;
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <CP_state>
 544:	05 c0       	rjmp	.+10     	; 0x550 <TickFct_CursorPos_H+0x4e>
		{
			CP_state = CPH_Move;
		}
		break;
		default:
		CP_state = CPH_Stay;
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <CP_state>
	{
		case CPH_Stay:
		//cursor_blink = 0;
		break;
		case CPH_Move:
		moveL_R(L_R);
 54c:	01 c0       	rjmp	.+2      	; 0x550 <TickFct_CursorPos_H+0x4e>
 54e:	c3 df       	rcall	.-122    	; 0x4d6 <moveL_R>
		//cursor_blink = 1;
		//cursor_on = 1;
		break;
	}
	//return state;
}
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	08 95       	ret

00000556 <TickFct_CursorPos_V>:

//determines vertical cursor movement from joystick input
enum CPV_States {CPV_Stay, CPV_Move} CV_state;
int TickFct_CursorPos_V()
{
	U_D = ReadADC(3);
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	8f df       	rcall	.-226    	; 0x478 <ReadADC>
	U_D -= 512;
 55a:	92 50       	subi	r25, 0x02	; 2
 55c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <U_D+0x1>
 560:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <U_D>
	switch(CV_state)//Transitions
 564:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <CV_state>
 568:	22 23       	and	r18, r18
 56a:	19 f0       	breq	.+6      	; 0x572 <TickFct_CursorPos_V+0x1c>
 56c:	21 30       	cpi	r18, 0x01	; 1
 56e:	59 f0       	breq	.+22     	; 0x586 <TickFct_CursorPos_V+0x30>
 570:	13 c0       	rjmp	.+38     	; 0x598 <TickFct_CursorPos_V+0x42>
	{
		case CPV_Stay:
		if((U_D <= 250) && (U_D > -249))
 572:	9c 01       	movw	r18, r24
 574:	28 50       	subi	r18, 0x08	; 8
 576:	3f 4f       	sbci	r19, 0xFF	; 255
 578:	23 3f       	cpi	r18, 0xF3	; 243
 57a:	31 40       	sbci	r19, 0x01	; 1
 57c:	88 f0       	brcs	.+34     	; 0x5a0 <TickFct_CursorPos_V+0x4a>
		{
			CV_state = CPV_Stay;
		}
		else
		{
			CV_state = CPV_Move;
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <CV_state>
 584:	0c c0       	rjmp	.+24     	; 0x59e <TickFct_CursorPos_V+0x48>
		}
		break;
		case CPV_Move:
		if((U_D <= 250) && (U_D > -249))
 586:	9c 01       	movw	r18, r24
 588:	28 50       	subi	r18, 0x08	; 8
 58a:	3f 4f       	sbci	r19, 0xFF	; 255
 58c:	23 3f       	cpi	r18, 0xF3	; 243
 58e:	31 40       	sbci	r19, 0x01	; 1
 590:	30 f4       	brcc	.+12     	; 0x59e <TickFct_CursorPos_V+0x48>
		{
			CV_state = CPV_Stay;
 592:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <CV_state>
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <TickFct_CursorPos_V+0x4a>
		{
			CV_state = CPV_Move;
		}
		break;
		default:
		CV_state = CPV_Stay;
 598:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <CV_state>
	{
		case CPV_Stay:
		//cursor_blink = 0;
		break;
		case CPV_Move:
		moveU_D(U_D);
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <TickFct_CursorPos_V+0x4a>
 59e:	85 df       	rcall	.-246    	; 0x4aa <moveU_D>
		//cursor_blink = 1;
		//cursor_on = 1;
		break;
	}
	//return state;
}
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <main>:
// ---------------------------------------------------------------------------
// MAIN PROGRAM
int main()
{
	DDRA = 0x83; PORTA = 0x7C;
 5a6:	83 e8       	ldi	r24, 0x83	; 131
 5a8:	81 b9       	out	0x01, r24	; 1
 5aa:	8c e7       	ldi	r24, 0x7C	; 124
 5ac:	82 b9       	out	0x02, r24	; 2
	TimerSet(10);
 5ae:	6a e0       	ldi	r22, 0x0A	; 10
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	88 dd       	rcall	.-1264   	; 0xc8 <TimerSet>
	TimerOn();
 5b8:	98 dd       	rcall	.-1232   	; 0xea <TimerOn>
	
	ADC_init();
 5ba:	57 df       	rcall	.-338    	; 0x46a <ADC_init>
	
 SetupPorts(); // use PortB for LCD interface
 5bc:	f6 dd       	rcall	.-1044   	; 0x1aa <SetupPorts>
 OpenSPI(); // start communication to TFT
 5be:	58 de       	rcall	.-848    	; 0x270 <OpenSPI>
 InitDisplay(); // initialize TFT controller
 5c0:	93 de       	rcall	.-730    	; 0x2e8 <InitDisplay>
 5c2:	bc de       	rcall	.-648    	; 0x33c <ClearScreen>
  ClearScreen();
 5c4:	8a e5       	ldi	r24, 0x5A	; 90
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 SetOrientation(90);
 5c8:	37 df       	rcall	.-402    	; 0x438 <SetOrientation>
 5ca:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <CV_state>
 
 CV_state = CPV_Stay;
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 CP_state = CPH_Stay;
 5d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <CP_state>
 5d4:	96 df       	rcall	.-212    	; 0x502 <TickFct_CursorPos_H>
 
  while (1) {
	  TickFct_CursorPos_H();
 5d6:	bf df       	rcall	.-130    	; 0x556 <TickFct_CursorPos_V>
	  TickFct_CursorPos_V();
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	38 ef       	ldi	r19, 0xF8	; 248
	  FillCircle (x, y, 15, RED);
 5dc:	4f e0       	ldi	r20, 0x0F	; 15
 5de:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 5e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
 5e6:	cf de       	rcall	.-610    	; 0x386 <FillCircle>
 5e8:	84 e6       	ldi	r24, 0x64	; 100
 5ea:	90 e0       	ldi	r25, 0x00	; 0
	  msDelay(100);
 5ec:	e3 dd       	rcall	.-1082   	; 0x1b4 <msDelay>
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	4f e0       	ldi	r20, 0x0F	; 15
	  FillCircle (x, y, 15, BLACK);
 5f4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 5f8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <x>
 5fc:	c4 de       	rcall	.-632    	; 0x386 <FillCircle>
 5fe:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
 602:	88 23       	and	r24, r24
 604:	e1 f3       	breq	.-8      	; 0x5fe <main+0x58>
	  while (!TimerFlag){}   // Wait for timer period
 606:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
 60a:	e4 cf       	rjmp	.-56     	; 0x5d4 <main+0x2e>

0000060c <__mulsi3>:
 60c:	db 01       	movw	r26, r22
	  TimerFlag = 0;         // Lower flag raised by timer
 60e:	8f 93       	push	r24
 610:	9f 93       	push	r25
  }
 612:	0b d0       	rcall	.+22     	; 0x62a <__muluhisi3>
 614:	bf 91       	pop	r27
 616:	af 91       	pop	r26
 618:	a2 9f       	mul	r26, r18
 61a:	80 0d       	add	r24, r0
 61c:	91 1d       	adc	r25, r1
 61e:	a3 9f       	mul	r26, r19
 620:	90 0d       	add	r25, r0
 622:	b2 9f       	mul	r27, r18
 624:	90 0d       	add	r25, r0
 626:	11 24       	eor	r1, r1
 628:	08 95       	ret

0000062a <__muluhisi3>:
 62a:	09 d0       	rcall	.+18     	; 0x63e <__umulhisi3>
 62c:	a5 9f       	mul	r26, r21
 62e:	90 0d       	add	r25, r0
 630:	b4 9f       	mul	r27, r20
 632:	90 0d       	add	r25, r0
 634:	a4 9f       	mul	r26, r20
 636:	80 0d       	add	r24, r0
 638:	91 1d       	adc	r25, r1
 63a:	11 24       	eor	r1, r1
 63c:	08 95       	ret

0000063e <__umulhisi3>:
 63e:	a2 9f       	mul	r26, r18
 640:	b0 01       	movw	r22, r0
 642:	b3 9f       	mul	r27, r19
 644:	c0 01       	movw	r24, r0
 646:	a3 9f       	mul	r26, r19
 648:	70 0d       	add	r23, r0
 64a:	81 1d       	adc	r24, r1
 64c:	11 24       	eor	r1, r1
 64e:	91 1d       	adc	r25, r1
 650:	b2 9f       	mul	r27, r18
 652:	70 0d       	add	r23, r0
 654:	81 1d       	adc	r24, r1
 656:	11 24       	eor	r1, r1
 658:	91 1d       	adc	r25, r1
 65a:	08 95       	ret

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
